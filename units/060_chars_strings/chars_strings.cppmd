# Characters & strings

`char` variable holds a single character

* `char digit = '4';`
* `char bang = '!';`
* These *must* be single quotes; double quotes are for strings only

Behind the scenes, `char` is much like `int`

* This is valid: `char digit = '4' - 1;`
* `digit` now contains the character `'3'`

`printf` format string for `char` is `%c`

# ASCII

ASCII governs the mapping between typical characters and integers

\vspace{5mm}

\centerline{\includegraphics[width=3.5in]{../images/ascii.png}}

\centering
\scriptsize

[commons.wikimedia.org/wiki/File:ASCII-Table-wide.svg](https://commons.wikimedia.org/wiki/File:ASCII-Table-wide.svg)

# Character example

\footnotesize

<!---cppmd-file convert_digit_0.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main() {
    char char_0 = '0';
    int int_0 = char_0 - '0';
    printf("Character printed as character: %c\n", char_0);
    printf("Character printed as integer: %d\n", char_0);
    printf("Integer printed as integer: %d\n", int_0);
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Character example

\footnotesize

<!---cppmd-file convert_digit_7.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main() {
    char char_7 = '7';
    int int_7 = char_7 - '0';
    printf("Character printed as character: %c\n", char_7);
    printf("Character printed as integer: %d\n", char_7);
    printf("Integer printed as integer: %d\n", int_7);
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

Variety of real-word data is represented as strings:

* Natural language: `"Hello world"`
* DNA: `"GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGC"`
* Stock movements: `"BAC -0.3 GOOGL +0.8 CIT -1.2"`
* Chess moves: `"1.e4 e5 2.Nf3 f6 3.Nxe5 fxe5"`

# Strings

In C, a string is an array of characters with final character equal to the "null character" `'\0'`

To declare string:

```c
    char day[] = "monday";
    
    char *day_ptr = "monday";
    
    const char cday[] = "monday";
    const char *cday_ptr = "monday";
    // can't modify characters in cday or cday_ptr
```

A string in double quotes (e.g. `"monday"`) is a *string literal*

# Strings

These declarations show that strings have a "pointer nature" and an "array nature":

```c
    char day[] = "monday";
    
    char *day_ptr = "monday";
``` 

These are largely interchangeable; some differences covered later

# Strings

A C string is an array of characters with the final character equal to the "null character" `'\0'`

Also called the the *null terminator*

```c
    // this definition:
    char day1[] = "monday";
    
    // is the same as this:
    char day2[] = {'m', 'o', 'n', 'd', 'a', 'y', '\0'};
    //                             terminator -> ^^^^
```

A character in single quotes (e.g. `'m'`) is a *character literal*

# Strings

Access the characters in a string using square brackets, same as arrays:

\footnotesize

<!---cppmd-file string_indexing_1.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main() {
    char str[] = "hello";
    str[0] = 'H'; // modify first character
    // print whole string, then 3rd char, then 5th
    printf("%s %c %c\n", str, str[2], str[4]);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

To print string with `printf` use `%s` format specifier

\footnotesize

<!---cppmd-file string_indexing_1.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main() {
    const char str[] = "World";
    printf("Hello, %s!\n", str);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

What's the mistake?

\footnotesize

<!---cppmd-file string_copy_1.c
#include <stdio.h>

int main() {
    const char str[] = "hello";
    char str_copy[5];
    for(int i = 0; i < 5; i++) {
        str_copy[i] = str[i];
    }
    printf("%s\n", str);
    printf("%s\n", str_copy);
    return 0;
}
-->

# Strings

```
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
```

\includegraphics[width=0.8in]{../images/hello_garbage.png}

Failed to null-terminate the copy, so `printf` prints beyond the end

* That's memory we don't own and didn't initialize
* It's "undefined"; could be anything!
* In this case, it's "garbage" that prints out as question marks

# Strings

\footnotesize

<!---cppmd-file string_copy_2.c
#include <stdio.h>

int main() {
    const char str[] = "hello";
    char str_copy[6]; // was [5]
    for(int i = 0; i < 6; i++) { // was i < 5
        str_copy[i] = str[i];
    }
    printf("%s\n", str);
    printf("%s\n", str_copy);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

Long string can be declared across multiple lines:

\footnotesize

```c
  // beginning of human mitochrondrial sequence
  const char *dna = "GATCACAGGTCTATCACCCTATTAA"
                    "CCACTCACGGGAGCTCTCCATGCAT"
                    "TTGGTATTTTCGTCTGGGGGGTGTG"
                    "CACGCGATAGCATTGCGAGACGCTG"
                    "GAGCCGGAGCACCCTATGTCGCAGT"
                    "ATCTGTCTTTGATTCCTGCCTCATT"
                    "CTATTATTTATCGCACCTACGTTCA"
                    "ATATTACAGGCGAACATACCTACTA"
                    "AAGTGTGTTAATTAATTAATGCTTG"
                    "TAGGACATAATAATAACAATTGAAT";
```

# Strings

`#include <string.h>` for helpful string functions

```c
    size_t strlen(const char *s);
```

Returns length of string `s` *not including* terminator

\footnotesize

<!---cppmd-file strlen_1.c
#include <stdio.h>   // for printf
#include <string.h>  // for strlen

int main() {
    const char str[] = "hello";
    printf("length(%s) = %lu\n", str, strlen(str));
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

More `<string.h>` functions

* `strlen(s)` returns length of string `s`
* `strcmp(s1, s2)` compares two strings alphabetically
    * negative: `s1 alphabetically before `s2`
    * zero: `s1` and `s2` equal
    * positive: `s2` alphabetically before `s1`
* `strncpy(dst, src)` copies characters from `src` into `dst`
* `strncat(dst, src)` copies `src` onto the end of `dst`
* `strstr(lng, shrt)` search for occurrence of `shrt` within `lng`

[`http://www.cplusplus.com/reference/cstring/`](http://www.cplusplus.com/reference/cstring/)

# Strings

Some C string functions are considered unsafe and *should not* be used:

* `strcat` (instead we use `strncat`)
* `strcpy` (instead we use `strncpy`)

[Common vulnerabilities guide for C programmers](https://security.web.cern.ch/security/recommendations/en/codetools/c.shtml)