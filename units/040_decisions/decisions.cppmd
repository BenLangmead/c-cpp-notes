# Decisions

\footnotesize

<!---cppmd-file if1.c
#include <stdio.h>

int main() {
    int number = 12;
    if(number % 2 == 0) {
        printf("yes\n");
    }
    return 0;
}
-->

\normalsize

Does it say "yes"?

# `if` example

\footnotesize

<!---cppmd-file if1.c
#include <stdio.h>

int main() {
    int number = 12;
    if(number % 2 == 0) {
        printf("yes\n");
    }
    return 0;
}
-->

<!---cppmd-shell
gcc -o %PREVBASE% %PREV% -std=c99 -pedantic -Wall -Wextra
./%PREVBASE%
-->

# `if` example

\footnotesize

<!---cppmd-file if2.c
#include <stdio.h>

int main() {
    int number = 13;
    if(number % 2 == 0) {
        printf("yes\n");
    }
    else {
        printf("no\n");
    }
    return 0;
}
-->

<!---cppmd-shell
gcc -o %PREVBASE% %PREV% -std=c99 -pedantic -Wall -Wextra
./%PREVBASE%
-->

# `if` example

\footnotesize

<!---cppmd-file if3.c
#include <stdio.h>

int main() {
    int number = 13;
    if(number = 1) {
        printf("yes\n");
    }
    else {
        printf("no\n");
    }
    return 0;
}
-->

# if / else

\scriptsize

<!---cppmd-shell
gcc -o %PREVBASE% %PREV% -std=c99 -pedantic -Wall -Wextra
./%PREVBASE%
-->

# if / else

*Careful*: Expression `number = 1` evaluates *to the assigned value*, which is 1

* Makes it easier to confuse `number = 1` and `number == 1`

Fortunately, modern compilers can warn us if we mistakenly use assignment in a condition

# if / else if / else

\scriptsize

<!---cppmd-file grading.c
#include <stdio.h>
int main() {
    int x = 79;
    if(x >= 90) {
        printf("A\n");
    }
    else if(x >= 80) {
        printf("B\n");
    }
    else if(x >= 70) {
        printf("C\n");
    }
    else if(x >= 60) {
        printf("D\n");
    }
    else {
        printf("F\n");
    }
    return 0;
}
-->

# if / else if / else

\footnotesize

<!---cppmd-shell
gcc -o %PREVBASE% %PREV% -std=c99 -pedantic -Wall -Wextra
./%PREVBASE%
-->

# switch / case

\tiny

<!---cppmd-file grading_switch.c
#include <stdio.h>
int main() {
    char grade = 'C';
    int points = 0;
    switch(grade) {
        case 'A':
            points = 4;
            break;
        case 'B':
            points = 3;
            break;
        case 'C':
            points = 2;
            break;
        case 'D':
            points = 1;
            break;
        default:
            points = 0;
    }
    printf("Grade %c contributes %d GPA points\n", grade, points);
    return 0;
}
-->

# switch / case

\footnotesize

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

<!--

# Decision-statement summary

```c
if(a) {
    printf("a is true\n");
}

if(a) {
    printf("a is true\n");
}
else {
    printf("a is false\n");
}
```

# Decision-statement summary

```c
if(a) {
    printf("a was true\n");
}
else if(b) {
    printf("a is false and b is true\n");
}
else {
    printf("both a and b are false\n");
}
```

# Decision-statement summary

```c
  switch (integer expr) {
  case c1: stmt1;  // execution starting point for c1
  case c2: stmt2;
           break;  // exits switch block
  case c3:
  case c4: stmt3;
           stmt4;  // executes stmt3, stmt4 and stmtlast for c3 or c4 matches
  default: stmtlast;   // if no case matches
  }
```

-->

# Compound assignments

Compound assignment operators perform an operation with a variable operand and assign the result back to teh variable

\begin{table}[ht]
\centering
\begin{tabular}{cc}
\hline
Example & Equivalent \\
\hline
\texttt{a += 5} & \texttt{a = a + 5} \\
\texttt{a -= 5} & \texttt{a = a - 5} \\
\texttt{a *= 5} & \texttt{a = a * 5} \\
\texttt{a /= 5} & \texttt{a = a / 5} \\
\texttt{a \%= 5} & \texttt{a = a \% 5} \\
\hline
\end{tabular}
\end{table}

# Increment and decrement

Increment and decrement operators act like `+= 1` and `-= 1`

\begin{table}[ht]
\centering
\begin{tabular}{ccc}
\hline
Example & Equivalent & Evaluates to \\
\hline
\texttt{a++} & \texttt{a += 1} & original (smaller) \texttt{a} \\
\texttt{++a} & \texttt{a += 1} & new (larger) \texttt{a} \\
\texttt{a--} & \texttt{a -= 1} & original (larger) \texttt{a} \\
\texttt{--a} & \texttt{a -= 1} & new (smaller) \texttt{a} \\
\hline
\end{tabular}
\end{table}

# for

<!---cppmd-file for_example.c
#include <stdio.h>
int main() {
    for(int i = 0; i < 10; i++) {
        printf("%d ", i);
    }
    return 0;
}
-->

\footnotesize 

<!---cppmd-shell
gcc -o %PREVBASE% %PREV% -std=c99 -pedantic -Wall -Wextra
./%PREVBASE%
-->

# while

<!---cppmd-file while_example.c
#include <stdio.h>
int main() {
    int i = 1;
    while((i % 7) != 0) {
        printf("%d ", i);
        i++;
    }
    return 0;
}
-->

\footnotesize

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# do / while

<!---cppmd-file do_while_example.c
#include <stdio.h>
int main() {
    int i = 0;
    do {
        printf("%d ", i);
        i++;
    } while((i % 7) != 0);
    return 0;
}
-->

\footnotesize

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# `scanf` loop

\footnotesize

<!---cppmd-file sum.c
#include <stdio.h>
int main() {
    int sum = 0;
    while(1) {
        int addend = 0;
        if(scanf("%d", &addend) != 1) {
            break; // immediately exit loop
        }
        sum += addend;
    }
    printf("%d\n", sum);
    return 0;
}
-->

\normalsize

This continues to scan even when you press enter.  To signal end-of-input, press `Ctrl-D` (possibly twice).  

# Nesting

Loops can be nested inside other loops

Loops & decision statements can be arbitrarily nested

* We use terms *outer* & *inner* to distinguish levels of nesting

\footnotesize

```c
    while(...) {          // OUTER LOOP
        if(...) {
            do {          // INNER LOOP
                if(...) {
                    ...
                } else {
                    ...
                }
            } while(...);
        }
    }
```

# `break` & `continue`

`break` exits a loop, `continue` advances to the next iteration

They affect the *most immediate loop* containing the `break`/`continue`.

\footnotesize

```c
    while(...) {          // OUTER LOOP
        if(...) {
            break;        // exit outer loop
        }
        do {              // INNER LOOP
            if(...) {
                continue; // advance inner loop
            }
        } while(...);
    }
```

\normalsize

`break`/`continue` work *only* with loops, not with `if`/`else`, functions, etc

# Code blocks

In examples so far, we used `{...}` to delimit a block of code:

```c
    while(...) {
        if(...) {
            break;
        }
        do {
            if(...) {
                continue;
            }
        } while(...);
    }
```

# Code blocks

If block consists of single statement, can omit `{` and `}`


```c
    while(...) {
        if(...) break;        // { } omitted
        do {
            if(...) continue; // { } omitted
        } while(...);
    }
```

# Loop summary

* `while(boolean expression) { statements }`
    * Iterates $\geq$ 0 times, as long as expression is true
* `do { statements } while(boolean expression)`
    * Iterates $\geq$ 1 times; always once, then more times as long as expression is true
* `for(initialize; boolean exp; update) { stmts }`
    * `initialize` happens first; usually declares & assigns "index variable"
    * Iterates $\geq$ 0 times, as long as boolean expression is true
    * Right after `stmts`, `update` is run; often it increments the index variable (`i++`)
* `break` immediately exits loop
* `continue` immediately proceeds to next iteration of loop

