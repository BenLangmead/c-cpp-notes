# Course conventions

C standard used is [C99](https://en.wikipedia.org/wiki/C99)

* I will explicitly discourage use of variable length arrays

C++ standard: [C++11](https://en.wikipedia.org/wiki/C%2B%2B11)

* I will delay introducing some C++11 features like `auto` and ranged-`for`

# Editing

When I code live in the classroom, I use `emacs`

These slides will provide occasional `emacs` tips

Feel free to use your preferred editor; you might choose one with: 

* Syntax highlighting (different colors denote different parts of the program)
* Integration with `git`
* Stronger integrations with the compiler

    * E.g. highlighting compiler warnings & errors

# Code

Slides will often present source code

Where possible, code for full program will be shown:

<!---cppmd-file mysterious.c
#include <stdio.h>

int main() {
    int x = 71;
    float y = 5.0 / 9.0 * (x - 32);
    printf("%0.2f", y); // print up to 2 decimal places
    return 0;
}
-->

# Code

When code is too long to fit, I use `...` to denote elided code

\footnotesize

```c
    class GradeList {
    public:
        ...
        void add(double grade) {
            grades.push_back(grade);
        }
        ...
    private:
        std::vector<double> grades;
        ...
    };
```

# Shell / compiling

Slides will also sometimes present shell commands:

<!---cppmd-file no-echo hello_world.c
#include <stdio.h>

int main() {
    printf("Hello, world!\n");
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

`$` prefixes a command you would enter at the shell prompt (excluding the prompt `$` itself)

Output is shown just after the command that generates it

* `./a.out` prints `Hello, world!`

# Shell / compiling

Slides do not assume much Linux proficiency

* I assume you know something about *standard streams*...

    * Standard input
    * Standard output
    * Standard error

* ...and input and output redirection, e.g.:

    * `cat file.txt | ./a.out`
    * `echo "Hello world" | ./a.out`
    * `./a.out > /dev/null`

# Shell / compiling

Commands and outputs are run in / transcribed from a shell session run in a Fedora 27 Docker container

You can use the same image, but it's not necessary

* Available at: [`hub.docker.com/r/benlangmead/c-cpp-notes/`](https://hub.docker.com/r/benlangmead/c-cpp-notes/)
* Software versions:
    * `gcc-7.2.1`
    * `g++-7.2.1`
    * `gdb: Fedora 8.0.1-33.fc27`
    * `valgrind-3.13.0`
    * `git v2.14.3`

# Shell / compiling

If you are using a different software setup than the one described on the previous slide, you may see different compiler warnings and errors than we show

You may also experience different error messages or symptoms at runtime

