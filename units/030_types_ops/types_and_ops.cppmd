# Variables, types, operators

What does this program do?

<!---cppmd-file mysterious.c
#include <stdio.h>

int main() {
    int x = 71;
    float y = 5.0 / 9.0 * (x - 32);
    printf("%.2f", y); // print up to 2 decimal places
    return 0;
}
-->

# Mystery program

<!---cppmd-file mysterious.c
#include <stdio.h>

int main() {
    int x = 71;
    float y = 5.0 / 9.0 * (x - 32);
    printf("%.2f", y); // print up to 2 decimal places
    return 0;
}
-->

<!---cppmd-shell
gcc mysterious.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Mysterious program

\vspace{3mm}

\centerline{\includegraphics[width=3in]{../images/fahrenheit_celsius.jpg}}

\centering
\tiny

https://en.wikipedia.org/wiki/Fahrenheit#/media/File:Raumthermometer_Fahrenheit%2BCelsius.jpg

# Mysterious program

<!---cppmd-file mysterious.c
#include <stdio.h>

int main() {
    int x = 71;
    float y = 5.0 / 9.0 * (x - 32);
    printf("%.2f", y); // print up to 2 decimal places
    return 0;
}
-->

<!---cppmd-shell
gcc mysterious.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Mystery program

<!---cppmd-file mysterious.c
#include <stdio.h>

int main() {
    int x = 71;
    float y = 5.0 / 9.0 * (x - 32);
    printf("%0.2f", y); // print up to 2 decimal places
    return 0;
}
-->

* `x` and `y` are _variables_
* `int` and `float` are their _types_
* `5.0 / 9.0 * (x - 32)` converts fahrenheit to celsius
* `printf` prints result as a decimal number

# Variables & Assignment

`int num_students;`

* Variable declaration gives a *type* (`int`) and *name* (`num_students`)
* A variable has a *value* that may change throughput the program's lifetime

`=` is the *assignment operator*, which modifies a variable's value

```
    num_students = 32; // assign
    printf("Student added\n");
    num_students = 33; // assign again
    printf("2 students dropped\n");
    num_students = 31; // assign again
```

# Assignment

It is good practice to declare and assign *at the same time*:

```
    int num_students = 32;
```

This is also called *initializing* the variable

A variable that has been declared but not yet assigned has an "undefined" value

# Mystery program

What's a good way to make this mystery program less mysterious?

<!---cppmd-file mysterious.c
#include <stdio.h>

int main() {
    int x = 71;
    float y = 5.0 / 9.0 * (x - 32);
    printf("%0.2f", y); // print up to 2 decimal places
    return 0;
}
-->

# Less mysterious program

\footnotesize

<!---cppmd-file convert_fc.c
#include <stdio.h>

// Convert 71 degrees fahrenheit to celsius, print result
int main() {
    int fahrenheit = 71;
    float celsius = 5.0 / 9.0 * (fahrenheit - 32);
    printf("%0.2f", celsius); // print up to 2 decimal places
    return 0;
}
-->

\normalsize

* Give variables meaningful names
* `// explanatory comments`

# Types

* Integer types
    * `int`: signed integer
    * `unsigned`: unsigned integer

* Floating-point (decimal) types
    * `float`: single-precision floating point number
    * `double`: double-precision floating point number

# Review

`int num_students = 35;`

* Variables have a name, a value and a type
* Type determines the kind of values it's allowed to have
* Good practice: give (*assign*) a variable a value at the same time as you *declare* it
* Give variables meaningful names

# Types

Integer types

* `int`: positive or negative integer
* `unsigned int`: positive integer (or 0)

\footnotesize

<!---cppmd-file ints.c
#include <stdio.h>

int main() {
    int x = -10; 
    unsigned int y = 333;
    printf("%d %u\n", x, y);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Types

Floating-point (decimal) types

* `float`: single-precision floating point number
* `double`: double-precision floating point number

\footnotesize

<!---cppmd-file floats.c
#include <stdio.h>

int main() {
    float w = 10000.0; 
    double z = 3.141592;
    printf("%f %.3f %e\n", w, z, w);
    // %e: scientific notation, %.3f: print 3 decimal places
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Types

`char`: character type

* Holds a 1-byte character, `'A'`, `'B'`, `'$'`, `'\n'`...
* `char`s are basically integers, as we'll see

# Types

Some other languages support a "Boolean" (true or false) type

In C, integers function as booleans

* `0`=`false`, non-`0`=`true`

# Types

\footnotesize

| Type     | Stands for                        | Size*   |  Range                    |
| --------:|:--------------------------------- |:--------|:------------------------- |
| `char`   | Character                         | 1 byte  | -128 -- 127               |
| `short`  | Short integer                     | 2 bytes | -32,768 -- 32,767         |
| `int`    | Integer                           | 4 bytes | $-2^{31}$ -- ($2^{31}-1$) |
| `long`   | Long integer                      | 8 bytes | $-2^{63}$ -- ($2^{63}-1$) |
| `float`  | Floating point (single precision) | 4 bytes | 1.2e-38 -- 3.4e+38        |
| `double` | Floating point (double precision) | 8 bytes | 2.3e-308 -- 1.7e+308      |

\* Size can vary depending on platform

# Types

*Unsigned* types can't represent negative numbers, but range to somewhat higher positive numbers:

| Type              | Stands for            | Size*   |  Range        |
| -----------------:|:--------------------- |:--------|:------------- |
| `unsigned char`   | Unsigned character    | 1 byte  | 0 -- 255      |
| `unsigned int`    | Unsigned integer      | 4 bytes | 0 -- $2^{32}$ |
| `unsigned long`   | Unsigned long integer | 8 bytes | 0 -- $2^{64}$ |
| `size_t`          | (same)                | 8 bytes | 0 -- $2^{64}$ |

No such thing as `unsigned float` or `unsigned double`

More on *numeric representations* and *numeric precision* later

We typically use `int`, `double` and `char`

<!---cppmd-file no-echo sizes.c
#include <stdio.h>

int main() {
    printf("sizeof(char)           = %d\n", (int)sizeof(char));
    printf("sizeof(short)          = %d\n", (int)sizeof(short));
    printf("sizeof(int)            = %d\n", (int)sizeof(int));
    printf("sizeof(long)           = %d\n", (int)sizeof(long));
    printf("sizeof(float)          = %d\n", (int)sizeof(float));
    printf("sizeof(double)         = %d\n", (int)sizeof(double));
    printf("sizeof(unsigned char)  = %d\n", (int)sizeof(unsigned char));
    printf("sizeof(unsigned int)   = %d\n", (int)sizeof(unsigned int));
    printf("sizeof(unsigned long)  = %d\n", (int)sizeof(unsigned long));
    printf("sizeof(size_t)         = %d\n", (int)sizeof(size_t));
    return 0;
}
-->

<!---cppmd-shell no-echo
gcc -o %PREVBASE% %PREV% -std=c99 -pedantic -Wall -Wextra
./%PREVBASE%
-->

# Operators

`3 + 4`

* `3` and `4` are *operands*, `+` is *operator*
* `3` and `4` are *constants* (not variables)

`num_students + 4`

* `num_students` and `4` are operands, `+` is operator
* `num_students` is a variable

# Arithmetic operators

| Operator | Function                | Expression  | Result  |
|:--------:|:----------------------- | -----------:| -------:|
| `+`      | Addition                |     `4 + 3` |     `7` |
| `-`      | Subtraction             |     `7 - 6` |     `1` |
| `*`      | Multiplication          |     `4 * 5` |    `20` |
| `/`      | Integer division        |     `7 / 2` |     `3` |
| `/`      | Floating-point division | `7.0 / 2.0` |   `3.5` |
| `%`      | Integer remainder       |    `11 % 3` |     `2` |

# Mysterious program

<!---cppmd-file mysterious.c
#include <stdio.h>

int main() {
    int x = 71;
    float y = 5.0 / 9.0 * (x - 32);
    printf("%0.2f", y); // print up to 2 decimal places
    return 0;
}
-->

<!---cppmd-shell
gcc mysterious.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Less mysterious program

\footnotesize

<!---cppmd-file convert_fc.c
#include <stdio.h>

// Convert 71 degrees fahrenheit to celsius, print result
int main() {
    int fahrenheit = 71;
    float celsius = 5.0 / 9.0 * (fahrenheit - 32);
    printf("%0.2f", celsius); // print up to 2 decimal places
    return 0;
}
-->

\normalsize

* Output is correct (double-check with google)

<!---cppmd-shell
gcc convert_fc.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Mistake?

\footnotesize

<!---cppmd-file convert_fc_badprec.c
#include <stdio.h>

// Convert 71 degrees fahrenheit to celsius, print result
int main() {
    int fahrenheit = 71;
    //float celsius = 5.0 / 9.0 * (fahrenheit - 32);
    float celsius = 5.0 / 9.0 * fahrenheit - 32;
    printf("%0.2f", celsius); // print up to 2 decimal places
    return 0;
}
-->

# Mistake?

\footnotesize

<!---cppmd-file convert_fc_badprec.c
#include <stdio.h>

// Convert 71 degrees fahrenheit to celsius, print result
int main() {
    int fahrenheit = 71;
    float celsius = 5.0 / 9.0 *  fahrenheit - 32 ;
    //               was: 9.0 * (fahrenheit - 32);
    printf("%0.2f", celsius); // print up to 2 decimal places
    return 0;
}
-->

<!---cppmd-shell
gcc convert_fc_badprec.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

* Mistake because multiplication & division have higher *precedence* than subtraction

# Operator precedence

Higher in the table means higher precedence

\tiny

| Operator      | Function                          | Associativity  |
|:-------------:|:--------------------------------- |:-------------- |
| `()`          | Function call / parentheses       | left to right  |
| `[]`          | Array subscript                   |                |
| `.`, `->`     | Member selection                  |                |
| `++`, `--`    | Postincrement/postdecrement       |                |
|---------------|-----------------------------------|----------------|
| `++`, `--`    | Preincrement/predecrement         | right to left  |
| `!`           | Logical negation (not)            |                |
| `~`           | Bitwise complement (not)          |                |
| `*`, `&`      | Pointer dereference, reference    |                |
|---------------|-----------------------------------|----------------|
| `*`, `/`, `%` | Multiplication, division, modulus | left to right  |
|---------------|-----------------------------------|----------------|
| `+`, `-`      | Addition, subtraction             | left to right  |
|---------------|-----------------------------------|----------------|
| `<<`, `>>`    | Bitwise left- and right shift     | left to right  |
|---------------|-----------------------------------|----------------|
| `<`, `<=`     | Relational operators              | left to right  |
| `>=`, `>`     |                                   |                |

# Operator precedence

Know where to look up the rules

\footnotesize

* [`en.cppreference.com/w/c/language/operator_precedence`](http://en.cppreference.com/w/c/language/operator_precedence)

\normalsize

...and use parentheses when in doubt

# Program variant

\footnotesize

<!---cppmd-file convert_fc_var1.c
#include <stdio.h>

// Convert 71 degrees fahrenheit to celsius, print result
int main() {
    int fahrenheit = 71;
    int base = 32;
    float factor = 5.0 / 9.0;
    float celsius = factor * (fahrenheit - base);
    printf("%0.2f", celsius); // print up to 2 decimal places
    return 0;
}
-->

\normalsize

Result is same

\footnotesize

<!---cppmd-shell
gcc convert_fc_var1.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Using const well

\footnotesize

<!---cppmd-file convert_fc_var2.c
#include <stdio.h>

// Convert 71 degrees fahrenheit to celsius, print result
int main() {
    int fahrenheit = 71;
    const int base = 32; // can't be modified
    const float factor = 5.0 / 9.0; // can't be modified
    float celsius = factor * (fahrenheit - base);
    printf("%0.2f", celsius); // print up to 2 decimal places
    return 0;
}
-->

# `const`

`const int base = 32;`

`const` before a type says the variable *cannot be modified later*

# `const`

\footnotesize

<!---cppmd-file convert_fc_var3.c
#include <stdio.h>

// Convert 71 degrees fahrenheit to celsius, print result
int main() {
    const int fahrenheit = 71;
    const float celsius = 5.0 / 9.0 * fahrenheit - 32;
    printf("%0.2f", celsius); // print up to 2 decimal places

    celsius = 5.0 / 9.0 * 07 - 32; // oops! reassigning to a const
    printf("%0.2f", celsius); // print up to 2 decimal places
    return 0;
}
-->

# `const`

\footnotesize

<!---cppmd-shell
gcc convert_fc_var3.c -std=c99 -pedantic -Wall -Wextra
-->

# Logical & relational operators

Relational & logical operators:

\begin{table}[ht]
\centering
\begin{tabular}{clcr}
\hline
Operator & Function & Example & Result \\
\hline
\texttt{==} / \texttt{!=} & Equals / does not equal & \texttt{1 == 1} & true (non-0) \\
\texttt{<} / \texttt{>} & Less / greater & \texttt{5 < 7} & true (non-0) \\
\texttt{<=} / \texttt{>=} & Less / greater or equal & \texttt{5 >= 7} & false (0) \\
\hline
\texttt{\&\&} & Both true (\textit{AND}) & \texttt{1 \&\& 0} & false (0) \\
\texttt{||} & Either true (\textit{OR}) & \texttt{1 || 0} & true (non-0) \\
\texttt{!} & Opposite (\textit{NOT}) & \texttt{!(1 || 0)} & false (0) \\
\hline
\end{tabular}
\end{table}

